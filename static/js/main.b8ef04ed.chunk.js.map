{"version":3,"sources":["forms.js","scriptGenerator.js","index.js"],"names":["LocalUserColumnsForm","register","props","Fragment","Form","Group","controlId","Label","Control","name","as","ref","required","columns","map","col","key","value","RadiusColumnsForm","LocalUserDefaultsForm","type","defaultValue","RadiusDefaultsForm","targets","pfsense","configPath","usernameProp","passwordProp","passwordHash","v","radius","CsvParse","input","config","a","Promise","resolve","Papa","parse","complete","App","defaultValues","JSON","localStorage","getItem","importTo","useForm","handleSubmit","useState","importColumns","setImportColumns","script","setScript","setImportTo","Container","onSubmit","options","file","defaults","updateDetails","updatePaswwords","setItem","stringify","header","then","r","users","data","row","out","Object","entries","forEach","prop","target","configVar","i","join","keys","values","importScript","unparse","Row","Col","md","Tab","defaultActiveKey","Card","Header","Nav","variant","className","Item","Link","eventKey","Body","Content","Pane","onChange","e","currentTarget","files","preview","Check","label","Footer","Button","Alert","href","rows","wrap","disabled","readOnly","text","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8ef04ed.chunk.js","sourcesContent":["import React from 'react'\nimport { Form } from 'react-bootstrap'\n\nexport const LocalUserColumnsForm = ({register, ...props}) => {\n  return (\n    <React.Fragment>\n      <Form.Group controlId=\"username\">\n        <Form.Label>Username</Form.Label>\n        <Form.Control name=\"columns.name\" as=\"select\" ref={register} required>\n          {props.columns.map(col => (<option key={col} value={col}>{col}</option>))}\n        </Form.Control>\n      </Form.Group>\n      <Form.Group controlId=\"password\">\n        <Form.Label>Password</Form.Label>\n        <Form.Control name=\"columns.bcrypt-hash\" as=\"select\" ref={register} required>\n          {props.columns.map(col => (<option key={col} value={col}>{col}</option>))}\n        </Form.Control>\n      </Form.Group>\n      <Form.Group controlId=\"description\">\n        <Form.Label>Full name</Form.Label>\n        <Form.Control name=\"columns.descr\" as=\"select\" ref={register}>\n          {props.columns.map(col => (<option key={col} value={col}>{col}</option>))}\n        </Form.Control>\n      </Form.Group>\n    </React.Fragment>\n  )\n}\n\nexport const RadiusColumnsForm = ({register, ...props}) => {\n  return (\n    <React.Fragment>\n      <Form.Group controlId=\"username\">\n        <Form.Label>Username</Form.Label>\n        <Form.Control name=\"columns.varusersusername\" as=\"select\" ref={register} required>\n          {props.columns.map(col => (<option key={col} value={col}>{col}</option>))}\n        </Form.Control>\n      </Form.Group>\n      <Form.Group controlId=\"password\">\n        <Form.Label>Password</Form.Label>\n        <Form.Control name=\"columns.varuserspassword\" as=\"select\" ref={register} required>\n          {props.columns.map(col => (<option key={col} value={col}>{col}</option>))}\n        </Form.Control>\n      </Form.Group>\n      <Form.Group controlId=\"description\">\n        <Form.Label>Description</Form.Label>\n        <Form.Control name=\"columns.description\" as=\"select\" ref={register}>\n          {props.columns.map(col => (<option key={col} value={col}>{col}</option>))}\n        </Form.Control>\n      </Form.Group>\n    </React.Fragment>\n  )\n}\n\nexport const LocalUserDefaultsForm = ({register}) => {\n  return (\n    <React.Fragment>\n      <input type=\"hidden\" name=\"defaults.scope\" value=\"user\" ref={register}/>\n      <input type=\"hidden\" name=\"defaults.authorizedkeys\" value=\"\" ref={register}/>\n      <input type=\"hidden\" name=\"defaults.ipsecpsk\" value=\"\" ref={register}/>\n      <Form.Group controlId=\"descr\">\n        <Form.Label>Full name</Form.Label>\n        <Form.Control name=\"defaults.descr\" defaultValue=\"Imported user\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"expires\">\n        <Form.Label>Expiration</Form.Label>\n        <Form.Control name=\"defaults.expires\" defaultValue=\"\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"dashboardcolumns\">\n        <Form.Label>Dashboard columns</Form.Label>\n        <Form.Control name=\"defaults.dashboardcolumns\" defaultValue=\"2\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"webguicss\">\n        <Form.Label>Theme</Form.Label>\n        <Form.Control name=\"defaults.webguicss\" defaultValue=\"pfSense.css\" ref={register}/>\n      </Form.Group>\n    </React.Fragment>\n  )\n}\n\n\nexport const RadiusDefaultsForm = ({register}) => {\n  return (\n    <React.Fragment>\n      <input type=\"hidden\" name=\"defaults.sortable\" value=\"\" ref={register}/>\n      <input type=\"hidden\" name=\"defaults.varusersusername\" value=\"\" ref={register}/>\n      <input type=\"hidden\" name=\"defaults.varuserspassword\" value=\"\" ref={register}/>\n      <Form.Group controlId=\"varuserspasswordencryption\">\n        <Form.Label>Password Encryption</Form.Label>\n        <Form.Control name=\"defaults.varuserspasswordencryption\" defaultValue=\"Cleartext-Password\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varuserswisprredirectionurl\">\n        <Form.Label>Redirection URL</Form.Label>\n        <Form.Control name=\"defaults.varuserswisprredirectionurl\" defaultValue=\"\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varuserssimultaneousconnect\">\n        <Form.Label>Number of Simultaneous Connections</Form.Label>\n        <Form.Control name=\"defaults.varuserssimultaneousconnect\" defaultValue=\"\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"description\">\n        <Form.Label>Description</Form.Label>\n        <Form.Control name=\"defaults.description\" defaultValue=\"imported user\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varusersframedipaddress\">\n        <Form.Label>IPv4 Address</Form.Label>\n        <Form.Control name=\"defaults.varusersframedipaddress\" defaultValue=\"\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varusersframedipnetmask\">\n        <Form.Label>Subnet Mask</Form.Label>\n        <Form.Control name=\"defaults.varusersframedipnetmask\" defaultValue=\"\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varusersframedroute\">\n        <Form.Label>IPv4 Gateway</Form.Label>\n        <Form.Control name=\"defaults.varusersframedroute\" defaultValue=\"\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varusersframedip6address\">\n        <Form.Label>IPv6 Address</Form.Label>\n        <Form.Control name=\"defaults.varusersframedip6address\" defaultValue=\"\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varusersframedip6route\">\n        <Form.Label>IPv6 Gateway</Form.Label>\n        <Form.Control name=\"defaults.varusersframedip6route\" defaultValue=\"\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varusersvlanid\">\n        <Form.Label>VLAN ID</Form.Label>\n        <Form.Control name=\"defaults.varusersvlanid\" defaultValue=\"\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varusersexpiration\">\n        <Form.Label>Expiration Date</Form.Label>\n        <Form.Control name=\"defaults.varusersexpiration\" defaultValue=\"\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varuserssessiontimeout\">\n        <Form.Label>Session Timeout</Form.Label>\n        <Form.Control name=\"defaults.varuserssessiontimeout\" defaultValue=\"\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varuserslogintime\">\n        <Form.Label>Possible Login Times</Form.Label>\n        <Form.Control name=\"defaults.varuserslogintime\" defaultValue=\"\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varusersamountoftime\">\n        <Form.Label>Amount of Time</Form.Label>\n        <Form.Control name=\"defaults.varusersamountoftime\" defaultValue=\"\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varuserspointoftime\">\n        <Form.Label>Time Period</Form.Label>\n        <Form.Control name=\"defaults.varuserspointoftime\" defaultValue=\"Daily\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varusersmaxtotaloctets\">\n        <Form.Label>Amount of Download and Upload Traffic</Form.Label>\n        <Form.Control name=\"defaults.varusersmaxtotaloctets\" defaultValue=\"\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varusersmaxtotaloctetstimerange\">\n        <Form.Label>Bandwidth Time Period</Form.Label>\n        <Form.Control name=\"defaults.varusersmaxtotaloctetstimerange\" defaultValue=\"daily\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varusersmaxbandwidthdown\">\n        <Form.Label>Maximum Bandwidth Down</Form.Label>\n        <Form.Control name=\"defaults.varusersmaxbandwidthdown\" defaultValue=\"\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varusersmaxbandwidthup\">\n        <Form.Label>Maximum Bandwidth Up</Form.Label>\n        <Form.Control name=\"defaults.varusersmaxbandwidthup\" defaultValue=\"\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varusersacctinteriminterval\">\n        <Form.Label>Accounting Interim Interval</Form.Label>\n        <Form.Control name=\"defaults.varusersacctinteriminterval\" defaultValue=\"\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varuserstopadditionaloptions\">\n        <Form.Label>Additional RADIUS Attributes on the TOP of this entry</Form.Label>\n        <Form.Control name=\"defaults.varuserstopadditionaloptions\" as=\"textarea\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varuserscheckitemsadditionaloptions\">\n        <Form.Label>Additional RADIUS Attributes (CHECK-ITEM)</Form.Label>\n        <Form.Control name=\"defaults.varuserscheckitemsadditionaloptions\" as=\"textarea\" ref={register}/>\n      </Form.Group>\n      <Form.Group controlId=\"varusersreplyitemsadditionaloptions\">\n        <Form.Label>Additional RADIUS Attributes (REPLY-ITEM)</Form.Label>\n        <Form.Control name=\"defaults.varusersreplyitemsadditionaloptions\" as=\"textarea\" ref={register}/>\n      </Form.Group>\n    </React.Fragment>\n  )\n}\n","const targets = {\n  pfsense: {\n    configPath: [\"system\", \"user\"],\n    usernameProp: \"name\",\n    passwordProp: \"bcrypt-hash\",\n    passwordHash: v => {\n      return `password_hash(${v}, PASSWORD_BCRYPT)`\n    }\n  },\n  radius: {\n    configPath: [\"installedpackages\", \"freeradius\", \"config\"],\n    usernameProp: \"varusersusername\",\n    passwordProp: \"varuserspassword\",\n    passwordHash: v => v\n  }\n}\n\nexport default ({\n  defaults, columns, data, target, updateDetails, updatePaswwords,\n}) => {\n  const props = targets[target]\n  const configVar = `$config${props.configPath.map(i => `['${i}']`).join(\"\")}`\n  return `$fields = explode(\",\", \"${Object.keys(defaults).join(\",\")}\");\n$defaults = explode(\",\", \"${Object.values(defaults).join(\",\")}\");\n$header = explode(\",\", \"${columns.join(\",\")}\");\n$csv = <<<CSV\n${data}\nCSV;\n$updateDetails = ${(updateDetails) ? \"true\" : \"false\"};\n$updatePaswwords = ${(updatePaswwords) ? \"true\" : \"false\"};\nif(!isset(${configVar})) {\n  ${configVar} = array();\n}\n$usernames = array_column(${configVar}, \"${props.usernameProp}\");\nforeach(str_getcsv($csv, \"\\\\n\") as $line) {\n  $user = array_merge(\n  \tarray_combine($fields, $defaults),\n  \tarray_combine($header, str_getcsv($line))\n  );\n  $index = array_search($user[\"${props.usernameProp}\"], $usernames);\n  if($index === false) {\n    $user[\"${props.passwordProp}\"] = ${props.passwordHash(`$user[\"${props.passwordProp}\"]`)};\n    ${configVar}[] = $user;\n    print(\"User \\${user[\"${props.usernameProp}\"]} inserted\\\\n\");\n  } else {\n    if($updateDetails || $updatePaswwords) {\n      foreach(array_combine($header, str_getcsv($line)) as $key => $value) {\n        if($updateDetails && $key != \"${props.passwordProp}\") {\n          ${configVar}[$index][$key] = $value;\n        }\n        if($updatePaswwords && $key == \"${props.passwordProp}\") {\n          ${configVar}[$index][$key] = ${props.passwordHash('$value')};\n        }\n      }\n      print(\"User \\${user[\"${props.usernameProp}\"]} updated\\\\n\");\n    } else {\n      print(\"User \\${user[\"${props.usernameProp}\"]} ignored\\\\n\");\n    }\n  }\n}\nwrite_config();\nreload_all();`\n}\n","import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport {\n  Button, Form, Container, Row, Col, Card, Tab, Nav, Alert\n} from 'react-bootstrap'\nimport { useForm } from \"react-hook-form\"\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport Papa from 'papaparse'\nimport {\n  LocalUserColumnsForm, LocalUserDefaultsForm,\n  RadiusColumnsForm, RadiusDefaultsForm\n} from './forms'\nimport importScript from './scriptGenerator'\n\nconst CsvParse = async (input, config) => {\n  return new Promise(resolve => {\n    Papa.parse(input, {...config, complete: resolve})\n  })\n}\n\nconst App = () => {\n  let defaultValues = JSON.parse(localStorage.getItem('defaultValues'))\n  if(defaultValues === null) defaultValues = {importTo: \"pfsense\"}\n  const {handleSubmit, register} = useForm({defaultValues})\n  const [importColumns, setImportColumns] = useState([])\n  const [script, setScript] = useState(\"\")\n  const [importTo, setImportTo] = useState(defaultValues['importTo'])\n\n  const onSubmit = (options) => {\n    const {\n      file, importTo, columns, defaults, updateDetails, updatePaswwords\n    } = options\n    localStorage.setItem('defaultValues', JSON.stringify({\n      importTo, columns, defaults, updateDetails, updatePaswwords\n    }))\n    CsvParse(file[0], {header: true}).then(r => {\n      const users = r.data.map(row => {\n        const out = {}\n        Object.entries(columns).forEach(([prop, col]) => {\n          out[prop] = row[col]\n        })\n        return out\n      })\n      setScript(importScript({\n        data: Papa.unparse(users, {header: false}),\n        defaults, columns: Object.keys(columns),\n        target: importTo,\n        updateDetails, updatePaswwords\n      }))\n    })\n  }\n\n  const fileSelect = e => {\n    Papa.parse(e.currentTarget.files[0], {\n      preview: 1, complete: r => setImportColumns(\n        [\"\", ...r.data[0]]\n      )\n    })\n  }\n\n  return (\n    <Container>\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <Row>\n          <Col md={6}>\n            <Tab.Container defaultActiveKey=\"input\">\n              <Card>\n                <Card.Header>\n                  <Nav variant=\"tabs\" className=\"card-header-tabs\">\n                    <Nav.Item>\n                      <Nav.Link eventKey=\"input\">Input options</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                      <Nav.Link eventKey=\"defaults\">Default values</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                      <Nav.Link eventKey=\"options\">Options</Nav.Link>\n                    </Nav.Item>\n                  </Nav>\n                </Card.Header>\n                <Card.Body>\n                  <Tab.Content>\n                    <Tab.Pane eventKey=\"input\">\n                      <Form.Group controlId=\"file\">\n                        <Form.Label>CSV File</Form.Label>\n                        <Form.Control name=\"file\" type=\"file\" ref={register} onChange={fileSelect} required/>\n                      </Form.Group>\n                      <Form.Group controlId=\"importTo\">\n                        <Form.Label>Import to</Form.Label>\n                        <Form.Control name=\"importTo\" as=\"select\" ref={register} onChange={e => setImportTo(e.currentTarget.value)} required>\n                          <option value=\"pfsense\">Local user database</option>\n                          <option value=\"radius\">FreeRADIUS user database</option>\n                        </Form.Control>\n                      </Form.Group>\n                      {(importTo === \"radius\") ? (\n                        <RadiusColumnsForm columns={importColumns} register={register}/>\n                      ) : (\n                        <LocalUserColumnsForm columns={importColumns} register={register}/>\n                      )}\n                    </Tab.Pane>\n                    <Tab.Pane eventKey=\"defaults\">\n                    {(importTo === \"radius\") ? (\n                        <RadiusDefaultsForm register={register}/>\n                      ) : (\n                        <LocalUserDefaultsForm register={register}/>\n                      )}\n                    </Tab.Pane>\n                    <Tab.Pane eventKey=\"options\">\n                      <Form.Group>\n                        <Form.Check label=\"Update existing user details\" name=\"updateDetails\" ref={register}/>\n                      </Form.Group>\n                      <Form.Group>\n                        <Form.Check label=\"Update existing user password\" name=\"updatePaswwords\" ref={register}/>\n                      </Form.Group>\n                    </Tab.Pane>\n                  </Tab.Content>\n                </Card.Body>\n                <Card.Footer>\n                  <Tab.Content>\n                    <Button type=\"submit\" variant=\"primary\">Generate PHP script</Button>\n                  </Tab.Content>\n                </Card.Footer>\n              </Card>\n            </Tab.Container>\n          </Col>\n          <Col md={6}>\n            <Card>\n              <Alert variant=\"warning\" className=\"mb-0\">\n                <Alert.Link href=\"https://docs.netgate.com/pfsense/en/latest/diagnostics/command-prompt.html#php-execute\" target=\"_blank\">\n                  Running PHP commands on pfSense\n                </Alert.Link>\n              </Alert>\n              <Card.Header>Generated Script</Card.Header>\n              <Card.Body>\n                <Form.Group>\n                  <Form.Control as=\"textarea\" rows={10} wrap=\"off\"\n                    value={script} disabled={(!script)} readOnly={true}\n                  />\n                </Form.Group>\n                <CopyToClipboard text={script}>\n                  <Button variant=\"primary\" disabled={(!script)}>\n                    Copy\n                  </Button>\n                </CopyToClipboard>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Form>\n    </Container>\n  )\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}